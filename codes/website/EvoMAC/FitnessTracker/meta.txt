Task:
# Requirements Document for FitnessTracker

## 1. Objective
Develop a comprehensive web application called 'FitnessTracker' that allows users to log their fitness activities, set goals, and track progress, all without the need for a SQL database, using Python and storing data in local text files.

## 2. Language
The required development language for this application is Python.
**Web Framework:** Flask

## 3. Page Design

### 3.1. Login Page
- **Page Title:** Login
- **Overview:** This page allows users to log into the application with their credentials.
- **Element IDs:**
  - `username_field`: Input field for the username
  - `password_field`: Input field for the password
  - `login_button`: Button to submit login credentials
  - `error_message`: Display area for login errors
  - `register_link`: Link to the registration page

### 3.2. Registration Page
- **Page Title:** Register
- **Overview:** This page allows new users to create an account.
- **Element IDs:**
  - `register_username_field`: Input field for the new username
  - `register_password_field`: Input field for the new password
  - `confirm_password_field`: Input field for confirming the password
  - `current_weight_field`: Input field for user's current weight
  - `goal_weight_field`: Input field for user's target weight
  - `register_button`: Button to submit registration details
  - `registration_success_message`: Display area for registration confirmations or errors

### 3.3. Dashboard Page
- **Page Title:** Dashboard
- **Overview:** This is the main page where users can view their fitness activity summary, set new goals, and log new activities.
- **Element IDs:**
  - `goal_weight`: Container to display goal weight
  - `current_weight`: Container to display current weight
  - `update_goal_button`: Button to navigate to the Set Goal page
  - `log_activity_button`: Button to navigate to the Log Activity page
  - `view_activity_button`: Button to navigate to the View Activity page (for detailed activity logs)
  - `logout_button`: Button to log out of the application and back to the Login Page

### 3.4. Update Goal Page
- **Page Title:** Update Goal
- **Overview:** This page allows users to update goal weight.
- **Element IDs:**
  - `goal_value_field`: Input field for the goal weight value
  - `save_goal_button`: Button to save the goal and return to the dashboard
  - `cancel_button`: Button to discard changes and return to the dashboard

### 3.5. Log Activity Page
- **Page Title**: Log Activity
- **Overview**: This page allows users to log details of their fitness activities
- **Element IDs**:
  - `activity_type_field`: Input field for the type of activity
  - `calories_burned_field`: Input field to enter the estimated calories burned
  - `current_weight_field`: Input field to enter current weight after this activity
  - `save_activity_button`: Button to save the activity log and return to the dashboard
  - `cancel_button`: Button to discard changes and return to the dashboard

### 3.6. View Activity Page
- **Page Title:** View Activity
- **Overview:** This page displays a detailed log of all recorded fitness activities, with options to edit or delete individual records.
- **Element IDs:**
  - `activity_log_list`: Container to display the list of logged activities
  - `activity_type_field`: Input field to enter the type of the target activity that need edit or delete
  - `edit_activity_button`: Button to navigate to the edit Activity page with pre-filled data for editing for the activity in the log list whose type is same as that in activity type field
  - `delete_activity_button`: Button to delete the activity log of the activity whose type is same as that in activity type field
  - `back_to_dashboard_button`: Button to return to the dashboard

### 3.7. Edit Activity Page
- **Page Title**: Edit Activity
- **Overview**: This page allows users to edit details of their fitness activities (the original data is pre-filled)
- **Element IDs**:
  - `activity_type_field`: Input field for the type of activity
  - `calories_burned_field`: Input field to enter the estimated calories burned
  - `current_weight_field`: Input field to enter current weight after this activity
  - `save_activity_button`: Button to save the activity log and return to the dashboard
  - `cancel_button`: Button to discard changes and return to the dashboard

## 4. Data Storage

### Data Format
The application will store data in local text files located in the `data` directory. Each type of data will be saved in a separate file to organize the information efficiently.

### Data Files
- **User Data File (`users.txt`)**:
  - Format: `username:password`
  - Example:
    ```
    john_doe:abcd1234
    jane_smith:xyz9876
    ```

- **Goal Data File (`goals.txt`):**:
  - Format: `username|current_weight|goal_weight`
  - Example:
    ```
    john_doe|100|80
    jane_smith|80|90
    ```
- **Activity Data File (`activities.txt`):**:
  - Format: `username|activity_type|calories_burned|current_weight`
  - Example:
    ```
    john_doe|Running|500|95
    jane_smith|Boxing|300|82
    ```

All text files will be created and accessed from the local `data` directory to ensure easy retrieval and management of information.

Config:
ChatEnvConfig.with_memory: False
ChatEnvConfig.clear_structure: True
ChatEnvConfig.git_management: False
ChatEnvConfig.gui_design: True
ChatEnvConfig.incremental_develop: False
ChatEnvConfig.background_prompt: ChatDev is a software company powered by multiple intelligent agents, such as chief executive officer, chief human resources officer, chief product officer, chief technology officer, etc, with a multi-agent organizational structure and the mission of 'changing the digital world through programming'.
ChatEnvConfig.set_free_port: True


Roster:
Chief Executive Officer, Counselor, Chief Human Resource Officer, Chief Product Officer, Chief Technology Officer, Programmer, Code Reviewer, Software Test Engineer, Chief Creative Officer

Modality:


Ideas:


Language:


Code_Version:
30.0

Proposed_images:
0

Incorporated_images:
0

